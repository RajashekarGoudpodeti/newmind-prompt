;; Auto-generated. Do not edit!


(when (boundp 'newmind_test::ImageAnalyzerResult)
  (if (not (find-package "NEWMIND_TEST"))
    (make-package "NEWMIND_TEST"))
  (shadow 'ImageAnalyzerResult (find-package "NEWMIND_TEST")))
(unless (find-package "NEWMIND_TEST::IMAGEANALYZERRESULT")
  (make-package "NEWMIND_TEST::IMAGEANALYZERRESULT"))

(in-package "ROS")
;;//! \htmlinclude ImageAnalyzerResult.msg.html


(defclass newmind_test::ImageAnalyzerResult
  :super ros::object
  :slots (_color ))

(defmethod newmind_test::ImageAnalyzerResult
  (:init
   (&key
    ((:color __color) (make-array 0 :initial-element 0.0 :element-type :float))
    )
   (send-super :init)
   (setq _color __color)
   self)
  (:color
   (&optional __color)
   (if __color (setq _color __color)) _color)
  (:serialization-length
   ()
   (+
    ;; float32[] _color
    (* 4    (length _color)) 4
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; float32[] _color
     (write-long (length _color) s)
     (dotimes (i (length _color))
       (sys::poke (elt _color i) (send s :buffer) (send s :count) :float) (incf (stream-count s) 4)
       )
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; float32[] _color
   (let (n)
     (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4)
     (setq _color (instantiate float-vector n))
     (dotimes (i n)
     (setf (elt _color i) (sys::peek buf ptr- :float)) (incf ptr- 4)
     ))
   ;;
   self)
  )

(setf (get newmind_test::ImageAnalyzerResult :md5sum-) "28a65ddb6f34603fc399ea0ac92274b8")
(setf (get newmind_test::ImageAnalyzerResult :datatype-) "newmind_test/ImageAnalyzerResult")
(setf (get newmind_test::ImageAnalyzerResult :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#result
float32[] color

")



(provide :newmind_test/ImageAnalyzerResult "28a65ddb6f34603fc399ea0ac92274b8")


